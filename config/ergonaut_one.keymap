#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>

#define TAP_TIME_SHORT 10 // ms
#define TAP_TIME_NORMAL 30 // ms

#define WAITING_TIME_NULL 0 // ms
#define WAITING_TIME_SHORT 10 // ms

// layers
#define LR_MAIN_EN  0
#define LR_MAIN_RU  1
#define LR_WILDS    2
#define LR_NUMS     3
#define LR_FN       4
#define LR_NAV      5
#define LR_MEDIA    6
#define LR_SERV     7

// key shortcuts
#define OS_EN_LAYOUT_SCUT LA(LS(N8))
#define RU_OS_LAYOUT_SCUT LA(LS(N9))
#define RU_NUMBER_SCUT LS(N3)
#define RU_COMMA_SCUT LS(FSLH)
#define RU_DOT_KEY FSLH

// key indexes
#define LEFT_HAND_KEYS_INDEXES \
  0  1  2  3  4  5     \
  12 13 14 15 16 17    \
  24 25 26 27 28 29
#define LEFT_THUMB_KEYS_INDEXES \
  36 37 38 

#define RIGHT_HAND_KEYS_INDEXES \
  6  7  8  9 10 11      \
  18 19 20 21 22 23     \
  30 31 32 33 34 35
#define RIGHT_THUMB_KEYS_INDEXES \
  39 40 41
#define K_KEY_INDEX 20
#define L_KEY_INDEX 21
#define TOP_LEFT_KEY_INDEX 0
#define TOP_RIGHT_KEY_INDEX 11

// tap global params
&lt { quick_tap_ms = <100>; };
&mt { quick-tap-ms = <400>; };

// tap mods
/ {
  behaviors {
      // // NOTE: example, "LR_WILDS_WITH 0 TAB". 0 is dummy argument: https://zmk.dev/docs/behaviors/hold-tap#using-different-behavior-types-with-hold-taps
      // LR_WILDS_WITH: LR_WILDS_WITH {
      //     compatible = "zmk,behavior-hold-tap";
      //     #binding-cells = <2>;
      //     flavor = "hold-preferred";
      //     tapping-term-ms = <150>;
      //     // bindings = <hold>, <tap>;
      //     bindings = <&TO_WILDS_RU>, <&kp>;
      // };

    // cmt: custom mod-tap
    cmt: cmt {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      bindings = <&kp>, <&kp>; // <hold fn>, <tap fn>;
    };
  };
};

// keys with mods
/ {
  behaviors {
    // locale switcher
    EN_RU_SWITCHER: EN_RU_SWITCHER {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&TO_LR_MAIN_EN>, <&TO_LR_MAIN_RU>;
      mods = <(MOD_LCTL)>;
    };
    // RU-keys
    COMMA_RU: COMMA_RU {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp RU_COMMA_SCUT>, <&kp COMMA>;
      mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
    };
    DOT_RU: DOT_RU {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp RU_DOT_KEY>, <&kp DOT>;
      mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
    };
    // wild-keys
    FSLH_BSLH: FSLH_BSLH {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp FSLH>, <&kp BSLH>;
      mods = <(MOD_LSFT)>;
    };
    // TODO: убрать квадратную скобку отсюда
    L_PAR_BRC_BKT: L_PAR_BRC_BKT {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp LPAR>, <&cmt LBKT LBRC>;
      mods = <(MOD_LSFT)>;
    };
    // TODO: убрать квадратную скобку отсюда
    R_PAR_BRC_BKT: R_PAR_BRC_BKT {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp RPAR>, <&cmt RBKT RBRC>;
      mods = <(MOD_LSFT)>;
    };
  };
};

/ {
  macros {
    // TODO: кажется, можно заменить на <&kp ...>
    EN_LAYOUT: EN_LAYOUT {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <WAITING_TIME_NULL>;
      tap-ms = <TAP_TIME_SHORT>;
      bindings =
        // <&kp EN_LAYOUT_SCUT>; // <&kp CAPS>;
        // EN_LAYOUT_SCUT realization
        <&macro_press &kp LALT>,
        <&macro_press &kp LS(N8)>,
        <&macro_release &kp LS(N8)>,
        <&macro_release &kp LALT>;
    };
    // language switcher macros
    TO_LR_MAIN_EN: TO_LR_MAIN_EN {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <WAITING_TIME_NULL>;
      tap-ms = <TAP_TIME_SHORT>;
      bindings =
        <&kp OS_EN_LAYOUT_SCUT>,
        <&to LR_MAIN_EN>;
    };
    TO_LR_MAIN_RU: TO_LR_MAIN_RU {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <TAP_TIME_SHORT>;
      bindings =
        <&kp RU_OS_LAYOUT_SCUT>,
        <&to LR_MAIN_RU>;
    };
    TO_WILDS_RU: TO_WILDS_RU {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <WAITING_TIME_NULL>;
      tap-ms = <TAP_TIME_SHORT>;
      bindings =
        // <&kp OS_EN_LAYOUT_SCUT>,
        <&EN_LAYOUT>,
        <&to LR_WILDS>,
        <&macro_pause_for_release>,
        <&to LR_MAIN_RU>,
        <&kp RU_OS_LAYOUT_SCUT>;
    };
    // RU-keys
    NUMBER_RU: NUMBER_RU {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <TAP_TIME_SHORT>;
      bindings =
        <&kp RU_OS_LAYOUT_SCUT>,
        <&kp RU_NUMBER_SCUT>,
        <&kp OS_EN_LAYOUT_SCUT>;
    };
    // service layer test output
    SRVC_TEST: SRVC_TEST {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <TAP_TIME_SHORT>;
      bindings =
          <&kp S>,<&kp E>,<&kp R>,<&kp V>,<&kp I>,<&kp C>,<&kp E>; // 'service'
    };
  };
};

/ {
  combos {
    compatible = "zmk,combos";
    // EN-RU layout switcher
    switch_lang {
      timeout-ms = <50>;
      key-positions = <K_KEY_INDEX L_KEY_INDEX>;
      layers = <LR_MAIN_EN LR_MAIN_RU>; 
      bindings = <&EN_RU_SWITCHER>;
    };
    // go to service layer on left half
    to_serv_left {
      timeout-ms = <200>;
      key-positions = <TOP_LEFT_KEY_INDEX LEFT_THUMB_KEYS_INDEXES>;
      layers = <LR_MAIN_EN LR_MAIN_RU>; 
      bindings = <&to LR_SERV>;
    };
    // go to service layer on right half
    to_serv_right {
      timeout-ms = <200>;
      key-positions = <TOP_RIGHT_KEY_INDEX RIGHT_THUMB_KEYS_INDEXES>;
      layers = <LR_MAIN_EN LR_MAIN_RU>; 
      bindings = <&to LR_SERV>;
    };
  };
};

/ {
  keymap {
    compatible = "zmk,keymap";

    LR_MAIN_EN {
      bindings = <
        // row 1
        &kp ESC        &kp Q   &kp W   &kp E         &kp R   &kp T              &kp Y   &kp U   &kp I   &kp O   &kp P       &none
        // row 2
        &mt LWIN TAB   &kp A   &kp S   &kp D         &kp F   &kp G              &kp H   &kp J   &kp K   &kp L   &none       &kp BSPC
        // row 3
        &kp LCTRL      &kp Z   &kp X   &lt LR_FN C   &kp V   &kp B              &kp N   &kp M   &none   &none   &kp COMMA   &kp DOT
        // thumb row
        &mt LALT ENTER   &kp LSHFT   &lt LR_NUMS SPACE                          &lt LR_NAV SPACE   &mo LR_WILDS   &lt LR_MEDIA ENTER
      >;
    };
    
    LR_MAIN_RU {
      bindings = <
        // row 1
        &trans   &kp Q   &kp W   &kp E         &kp R   &cmt GRAVE T            &kp Y   &kp U          &kp I       &kp O     &kp P       &kp LBKT
        // row 2
        &trans   &kp A   &kp S   &kp D         &kp F   &kp G                   &kp H   &cmt SQT J     &kp K       &kp L     &kp SEMI    &trans
        // row 3
        &trans   &kp Z   &kp X   &lt LR_FN C   &kp V   &kp B                   &kp N   &cmt RBKT M    &kp COMMA   &kp DOT   &COMMA_RU   &DOT_RU
        // thumb row
        &trans   &trans   &trans                                               &trans   &TO_WILDS_RU   &trans
      >;
    };

    LR_WILDS {
      bindings = <
        // row 1
        &kp GRAVE   &NUMBER_RU   &kp HASH   &kp PIPE   &kp AMPS    &kp CARET            &kp PRCNT   &FSLH_BSLH       &kp ASTRK        &kp SQT     &kp DQT    &none
        // row 2
        &trans      &none        &kp AT     &kp EXCL   &kp QMARK   &none                &kp EQUAL   &kp MINUS        &kp PLUS         &kp COLON   &kp SEMI   &trans
        // row 3
        &trans      &none        &kp DLLR   &none      &none       &none                &none       &L_PAR_BRC_BKT   &R_PAR_BRC_BKT   &kp LT      &kp GT     &trans
        // thumb row
        &trans   &trans   &trans                                                        &trans   &trans   &trans
      >;
    };

    LR_NUMS {
      bindings = <
        // row 1
        &trans   &trans   &trans    &trans    &trans   &trans            &none   &kp N7   &kp N8   &kp N9   &none    &none
        // row 2
        &trans   &trans   &trans    &trans    &trans   &trans            &none   &kp N4   &kp N5   &kp N6   &kp N0   &trans
        // row 3
        &trans   &trans   &trans    &trans    &trans   &trans            &none   &kp N1   &kp N2   &kp N3   &trans   &trans
        // thumb row
        &trans   &trans   &trans                                         &trans   &trans   &trans
      >;
    };

    LR_FN {
      bindings = <
        // row 1
        &trans   &trans   &trans    &trans    &trans   &trans            &none   &kp F7   &kp F8   &kp F9   &kp F10   &none
        // row 2
        &trans   &trans   &trans    &trans    &trans   &trans            &none   &kp F4   &kp F5   &kp F6   &kp F11   &trans
        // row 3
        &trans   &trans   &trans    &trans    &trans   &trans            &none   &kp F1   &kp F2   &kp F3   &kp F12   &none
        // thumb row
        &trans   &trans   &trans                                         &trans   &trans   &trans
      >;
    };

    LR_NAV {
      bindings = <
        // row 1
        &trans   &trans   &trans           &mmv MOVE_UP     &trans            &msc SCRL_UP              &kp PG_UP   &kp HOME    &kp UP      &kp END     &kp C_NEXT   &kp K_APP
        // row 2
        &trans   &trans   &mmv MOVE_LEFT   &mmv MOVE_DOWN   &mmv MOVE_RIGHT   &msc SCRL_DOWN            &kp PG_DN   &kp LEFT    &kp DOWN    &kp RIGHT   &kp C_PREV   &trans
        // row 3
        &trans   &trans   &trans           &trans           &trans            &trans                    &none       &mkp LCLK   &mkp MCLK   &mkp RCLK   &trans       &trans
        // thumb row
        &trans   &trans   &trans                                                                        &trans   &trans   &trans
      >;
    };

    LR_MEDIA {
      bindings = <
        // row 1
        &trans   &none   &none   &none   &none   &none            &none   &kp C_PP     &kp C_PREV     &kp C_NEXT      &none   &kp DEL
        // row 2
        &trans   &none   &none   &none   &none   &none            &none   &kp C_MUTE   &kp C_VOL_DN   &kp C_VOL_UP   &none   &none
        // row 3
        &trans   &none   &none   &none   &none   &none            &none   &none        &kp C_BRI_DN   &kp C_BRI_UP   &none   &kp PSCRN
        // thumb row
        &trans   &trans   &trans                                  &trans   &trans   &trans
      >;
    };

    LR_SERV {
      bindings = <
        // row 1
        &to LR_MAIN_EN   &none   &none   &none   &none   &bootloader            &bootloader   &none          &none          &none          &none   &to LR_MAIN_EN
        // row 2
        &none            &none   &none   &none   &none   &sys_reset             &sys_reset    &none          &none          &none          &none   &none
        // row 3
        &none            &none   &none   &none   &none   &SRVC_TEST             &SRVC_TEST    &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &none   &bt BT_CLR 
        // thumb row
        &trans   &trans   &trans                                                &trans   &trans   &trans
      >;
    };
  };
};