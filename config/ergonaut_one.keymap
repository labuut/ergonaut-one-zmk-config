#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/pointing.h>
#include <input/processors.dtsi>

// times
#define TAP_TIME_SHORT 10 // ms
#define TAP_TIME_NORMAL 30 // ms

#define WAITING_TIME_NULL 0 // ms
#define WAITING_TIME_SHORT 5 // ms

// layers
#define LR_MAIN_EN   0
#define LR_MAIN_RU   1
#define LR_WILDS_EN  2
#define LR_WILDS_RU  3
#define LR_NUMS      4
#define LR_FN        5
#define LR_NAV       6
#define LR_MOUSE     7
#define LR_MOUSE_F   8  // fast mouse
#define LR_MOUSE_S   9  // slow mouse
#define LR_MEDIA     10
#define LR_SERV      11

// key shortcuts
#define OS_EN_LAYOUT_SCUT LA(LS(N8))
#define OS_RU_LAYOUT_SCUT LA(LS(N9))

// RU key shortcuts
#define COMMA_RU_SCUT LS(FSLH)
#define DOT_RU_KEY FSLH
#define NUMERO_RU_SCUT LS(N3)

// key indexes
#define LEFT_HAND_KEYS_INDEXES \
  0  1  2  3  4  5     \
  12 13 14 15 16 17    \
  24 25 26 27 28 29
#define LEFT_THUMB_KEYS_INDEXES \
  36 37 38 

#define RIGHT_HAND_KEYS_INDEXES \
  6  7  8  9 10 11      \
  18 19 20 21 22 23     \
  30 31 32 33 34 35
#define RIGHT_THUMB_KEYS_INDEXES \
  39 40 41
#define K_KEY_INDEX 20
#define L_KEY_INDEX 21
#define TOP_LEFT_KEY_INDEX 0
#define TOP_RIGHT_KEY_INDEX 11

// tap global params
&lt { quick_tap_ms = <100>; };
&mt { quick-tap-ms = <400>; };

// tap mods
/ {
  behaviors {
      // // NOTE: example mod-tap with macro ("LR_WILDS_WITH 0 TAB". 0 is dummy argument: https://zmk.dev/docs/behaviors/hold-tap#using-different-behavior-types-with-hold-taps)
      // LR_WILDS_WITH: LR_WILDS_WITH {
      //     compatible = "zmk,behavior-hold-tap";
      //     #binding-cells = <2>;
      //     flavor = "hold-preferred";
      //     tapping-term-ms = <150>;
      //     // bindings = <hold>, <tap>;
      //     bindings = <&TO_WILDS_RU>, <&kp>;
      // };

    // custom mod-tap
    cmt: cmt {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      bindings = <&kp>, <&kp>; // <hold fn>, <tap fn>;
    };
    // custom nav mod-tap
    navmt: navmt {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      bindings = <&TO_NAV>, <&kp>; // <hold fn>, <tap fn>;
    };
    // custom nums mod-tap
    numsmt: numsmt {
      compatible = "zmk,behavior-hold-tap";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      bindings = <&TO_NUMS>, <&kp>; // <hold fn>, <tap fn>;
    };
    // toggle off layer
    tog_off: tog_off {
      compatible = "zmk,behavior-toggle-layer";
      #binding-cells = <1>;
      display-name = "Toggle Layer Off";
      toggle-mode = "off";
    };
  };
};

// keys with mods
/ {
  behaviors {
    // locale switcher
    EN_RU_SWITCHER: EN_RU_SWITCHER {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&TO_LR_MAIN_EN>, <&TO_LR_MAIN_RU>;
      mods = <(MOD_LCTL)>;
    };
    // RU keys
    COMMA_RU: COMMA_RU {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp COMMA_RU_SCUT>, <&kp COMMA>;
      mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
    };
    DOT_RU: DOT_RU {
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <0>;
      bindings = <&kp DOT_RU_KEY>, <&kp DOT>;
      mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
    };
    mrph: mrph { // mod morph
      compatible = "zmk,behavior-mod-morph";
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
      mods = <(MOD_LSFT)>;
    };
    // L_PAR_BRC: L_PAR_BRC {
    //   compatible = "zmk,behavior-mod-morph";
    //   #binding-cells = <0>;
    //   bindings = <&kp LPAR>, <&kp LBRC>;
    //   mods = <(MOD_LSFT)>;
    // };
    // R_PAR_BRC: R_PAR_BRC {
    //   compatible = "zmk,behavior-mod-morph";
    //   #binding-cells = <0>;
    //   bindings = <&kp RPAR>, <&kp RBRC>;
    //   mods = <(MOD_LSFT)>;
    // };
    // LBKT_LT: LBKT_LT {
    //   compatible = "zmk,behavior-mod-morph";
    //   #binding-cells = <0>;
    //   bindings = <&kp LT>, <&kp LBKT>;
    //   mods = <(MOD_LSFT)>;
    // };
    // RBKT_GT: RBKT_GT {
    //   compatible = "zmk,behavior-mod-morph";
    //   #binding-cells = <0>;
    //   bindings = <&kp GT>, <&kp RBKT>;
    //   mods = <(MOD_LSFT)>;
    // };
    // // TODO: убрать квадратную скобку отсюда
    // R_PAR_BRC_BKT_EN: R_PAR_BRC_BKT_EN {
    //   compatible = "zmk,behavior-mod-morph";
    //   #binding-cells = <0>;
    //   bindings = <&kp RPAR>, <&cmt RBKT RBRC>;
    //   mods = <(MOD_LSFT)>;
    // };
  };
};

/ {
  macros {
    // layer switching macros
    TO_LR_MAIN_EN: TO_LR_MAIN_EN {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <WAITING_TIME_NULL>;
      tap-ms = <TAP_TIME_SHORT>;
      bindings =
        <&kp OS_EN_LAYOUT_SCUT>,
        <&to LR_MAIN_EN>;
    };
    TO_LR_MAIN_RU: TO_LR_MAIN_RU {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <WAITING_TIME_NULL>;
      tap-ms = <TAP_TIME_SHORT>;
      bindings =
        <&kp OS_RU_LAYOUT_SCUT>,
        <&to LR_MAIN_RU>;
    };
    TO_WILDS_RU: TO_WILDS_RU {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <WAITING_TIME_NULL>;
      tap-ms = <TAP_TIME_SHORT>;
      bindings =
        <&kp OS_EN_LAYOUT_SCUT>,
        <&to LR_WILDS_EN>,
        <&macro_pause_for_release>,
        <&to LR_MAIN_RU>,
        <&kp OS_RU_LAYOUT_SCUT>;
    };
    TO_NAV: TO_NAV {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <WAITING_TIME_NULL>;
      tap-ms = <TAP_TIME_SHORT>;
      bindings =
        <&macro_press &mo LR_NAV>,
        <&macro_pause_for_release>,
        <&tog_off LR_MOUSE>,
        <&macro_release &mo LR_NAV>;
    };
    TO_NUMS: TO_NUMS {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <WAITING_TIME_NULL>;
      tap-ms = <TAP_TIME_SHORT>;
      bindings =
        <&macro_press &mo LR_NUMS>,
        <&macro_pause_for_release>,
        <&tog_off LR_FN>,
        <&macro_release &mo LR_NUMS>;
    };
    // wild layer macros
    wlde: wlde { // for EN wild layer
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      wait-ms = <WAITING_TIME_NULL>;
      tap-ms = <TAP_TIME_SHORT>;
      bindings =
        <&kp OS_RU_LAYOUT_SCUT>,
        <&macro_param_1to1>,
        <&kp MACRO_PLACEHOLDER>,
        <&kp OS_EN_LAYOUT_SCUT>;
    };
    wldr: wldr { // for RU wild layer
      compatible = "zmk,behavior-macro-one-param";
      #binding-cells = <1>;
      wait-ms = <WAITING_TIME_NULL>;
      tap-ms = <TAP_TIME_SHORT>;
      bindings =
        <&kp OS_EN_LAYOUT_SCUT>,
        <&macro_param_1to1>,
        <&kp MACRO_PLACEHOLDER>,
        <&kp OS_RU_LAYOUT_SCUT>;
    };
    wldr2: wldr2 { // for RU wild layer
      compatible = "zmk,behavior-macro-two-param";
      #binding-cells = <1>;
      wait-ms = <WAITING_TIME_NULL>;
      tap-ms = <TAP_TIME_SHORT>;
      bindings =
        <&kp OS_EN_LAYOUT_SCUT>,
        <&macro_param_1to1>,
        <&kp MACRO_PLACEHOLDER>,
        <&kp OS_RU_LAYOUT_SCUT>;
    };
    // service layer test output
    SRVC_TEST: SRVC_TEST {
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <WAITING_TIME_NULL>;
      tap-ms = <TAP_TIME_SHORT>;
      bindings =
          <&kp S>,<&kp E>,<&kp R>,<&kp V>,<&kp I>,<&kp C>,<&kp E>; // 'service'
    };
  };
};

/ {
  combos {
    compatible = "zmk,combos";
    // EN-RU layout switcher
    switch_lang {
      timeout-ms = <30>;
      key-positions = <K_KEY_INDEX L_KEY_INDEX>;
      layers = <LR_MAIN_EN LR_MAIN_RU>; 
      bindings = <&EN_RU_SWITCHER>;
    };
    // go to service layer on left half
    to_serv_left {
      timeout-ms = <200>;
      key-positions = <TOP_LEFT_KEY_INDEX LEFT_THUMB_KEYS_INDEXES>;
      layers = <LR_MAIN_EN LR_MAIN_RU>; 
      bindings = <&to LR_SERV>;
    };
    // go to service layer on right half
    to_serv_right {
      timeout-ms = <200>;
      key-positions = <TOP_RIGHT_KEY_INDEX RIGHT_THUMB_KEYS_INDEXES>;
      layers = <LR_MAIN_EN LR_MAIN_RU>; 
      bindings = <&to LR_SERV>;
    };
  };
};

// '&mmv', '&mmv_input_listener' got from prostas: https://github.com/proostas/colemator-layout-zmk-module/blob/main/include/colemator/mouse.dtsi
&mmv {
    acceleration-exponent = <1>;  // 1
    time-to-max-speed-ms = <300>; // 300
    delay-ms = <0>;
    trigger-period-ms = <8>;      // 16
};
&mmv_input_listener {
    fast {
        layers = <LR_MOUSE_F>;
        input-processors = <&zip_xy_scaler 2 1>;
    };
    slow {
        layers = <LR_MOUSE_S>;
        input-processors = <&zip_xy_scaler 1 3>;
    };
};

/ {
  keymap {
    compatible = "zmk,keymap";

    LR_MAIN_EN {
      bindings = <
        // row 1
        &kp ESC        &kp Q   &kp W   &kp E   &kp R   &kp T            &kp Y   &kp U   &kp I   &kp O   &kp P       &none
        // row 2
        &mt LWIN TAB   &kp A   &kp S   &kp D   &kp F   &kp G            &kp H   &kp J   &kp K   &kp L   &none       &kp BSPC
        // row 3
        &kp LCTRL      &kp Z   &kp X   &kp C   &kp V   &kp B            &kp N   &kp M   &none   &none   &kp COMMA   &kp DOT
        // thumb row
        &mt LALT ENTER   &kp LSHFT   &numsmt 0 SPACE                    &navmt 0 SPACE   &mo LR_WILDS_EN   &lt LR_MEDIA ENTER
      >;
    };
    
    LR_MAIN_RU {
      bindings = <
        // row 1
        &trans   &kp Q   &kp W   &kp E   &kp R   &cmt GRAVE T            &kp Y   &kp U          &kp I       &kp O     &kp P       &kp LBKT
        // row 2
        &trans   &kp A   &kp S   &kp D   &kp F   &kp G                   &kp H   &cmt SQT J     &kp K       &kp L     &kp SEMI    &trans
        // row 3
        &trans   &kp Z   &kp X   &kp C   &kp V   &kp B                   &kp N   &cmt RBKT M    &kp COMMA   &kp DOT   &COMMA_RU   &DOT_RU
        // thumb row
        &trans   &trans   &trans                                         &trans   &mo LR_WILDS_RU   &trans
      >;
    };

    LR_WILDS_EN {
      bindings = <
        // row 1
        &kp GRAVE   &wlde NUMERO_RU_SCUT   &kp HASH   &kp PIPE   &kp AMPS    &kp CARET            &kp PRCNT   &kp FSLH     &kp ASTRK    &kp SQT     &kp DQT    &kp BSLH
        // row 2
        &trans      &kp DLLR               &kp AT     &kp EXCL   &kp QMARK   &none                &kp EQUAL   &kp MINUS    &kp PLUS     &kp COLON   &kp SEMI   &trans
        // row 3
        &trans      &kp LT                 &kp LBKT   &kp LBRC   &kp LPAR    &none                &none       &mrph LPAR LBRC   &mrph RPAR RBRC   &mrph LBKT LT    &mrph RBKT GT   &none
        // &trans      &kp LT                 &kp LBKT   &kp LBRC   &kp LPAR    &none                &none       &kp RPAR    &kp RBRC    &kp RBKT    &kp GT     &none
        // thumb row
        &trans   &trans   &trans                                                                  &trans   &trans   &trans
      >;
    };

    LR_WILDS_RU {
      bindings = <
        // row 1
        &wldr GRAVE   &kp NUMERO_RU_SCUT   &wldr HASH   &wldr PIPE   &wldr AMPS    &wldr CARET            &kp PRCNT   &wldr FSLH   &wldr ASTRK   &wldr SQT     &wldr DQT    &wldr BSLH
        // row 2
        &trans        &wldr DLLR           &wldr AT     &kp EXCL     &wldr QMARK   &none                  &kp EQUAL   &kp MINUS    &kp PLUS      &wldr COLON   &wldr SEMI   &trans
        // row 3
        &trans        &wldr LT             &wldr LBKT   &wldr LBRC   &wldr LPAR    &none                  &none       &wldr RPAR   &wldr RBRC    &wldr RBKT    &wldr GT     &none
        // thumb row
        &trans   &trans   &trans                                                                          &trans   &trans   &trans
      >;
    };

    LR_NUMS {
      bindings = <
        // row 1
        &trans   &trans   &trans    &tog LR_FN    &trans   &trans            &none   &kp N7   &kp N8   &kp N9   &none    &none
        // row 2
        &trans   &trans   &trans    &trans        &trans   &trans            &none   &kp N4   &kp N5   &kp N6   &kp N0   &trans
        // row 3
        &trans   &trans   &trans    &trans        &trans   &trans            &none   &kp N1   &kp N2   &kp N3   &trans   &trans
        // thumb row
        &trans   &trans   &trans                                             &trans   &trans   &trans
      >;
    };

    LR_FN {
      bindings = <
        // row 1
        &trans   &trans   &trans    &tog LR_FN    &trans   &trans            &none   &kp F7   &kp F8   &kp F9   &kp F10   &none
        // row 2
        &trans   &trans   &trans    &trans        &trans   &trans            &none   &kp F4   &kp F5   &kp F6   &kp F11   &trans
        // row 3
        &trans   &trans   &trans    &trans        &trans   &trans            &none   &kp F1   &kp F2   &kp F3   &kp F12   &none
        // thumb row
        &trans   &trans   &trans                                             &trans   &trans   &trans
      >;
    };

    LR_NAV {
      bindings = <
        // row 1
        &trans   &trans   &trans   &tog LR_MOUSE   &trans   &msc SCRL_UP              &kp PG_UP       &kp HOME   &kp UP     &kp END     &none    &kp K_APP
        // row 2
        &trans   &trans   &trans   &trans          &trans   &msc SCRL_DOWN            &kp PG_DN       &kp LEFT   &kp DOWN   &kp RIGHT   &none    &trans
        // row 3
        &trans   &trans   &trans   &trans          &trans   &trans                    &none           &none      &none      &none       &trans   &trans
        // thumb row
        &trans   &trans   &trans                                                      &trans   &trans   &trans
      >;
    };

    LR_MOUSE {
      bindings = <
        // row 1
        &trans   &trans   &trans   &tog LR_MOUSE    &trans           &msc SCRL_UP              &msc SCRL_UP     &none            &mmv MOVE_UP     &none             &none    &kp K_APP
        // row 2
        &trans   &trans   &trans   &mo LR_MOUSE_S   &mo LR_MOUSE_F   &msc SCRL_DOWN            &msc SCRL_DOWN   &mmv MOVE_LEFT   &mmv MOVE_DOWN   &mmv MOVE_RIGHT   &none    &trans
        // row 3
        &trans   &trans   &trans   &trans           &trans           &trans                    &none            &mkp LCLK        &mkp MCLK        &mkp RCLK         &trans   &trans
        // thumb row
        &trans   &trans   &trans                                                               &trans   &trans   &trans
      >;
    };

    LR_MOUSE_F {
      bindings = <
        // row 1
        &trans   &trans   &trans   &trans   &trans   &trans            &trans   &trans   &trans   &trans   &trans   &trans
        // row 2
        &trans   &trans   &trans   &trans   &trans   &trans            &trans   &trans   &trans   &trans   &trans   &trans
        // row 3
        &trans   &trans   &trans   &trans   &trans   &trans            &trans   &trans   &trans   &trans   &trans   &trans
        // thumb row
        &trans   &trans   &trans                                       &trans   &trans   &trans
      >;
    };

    LR_MOUSE_S {
      bindings = <
        // row 1
        &trans   &trans   &trans   &trans   &trans   &trans            &trans   &trans   &trans   &trans   &trans   &trans
        // row 2
        &trans   &trans   &trans   &trans   &trans   &trans            &trans   &trans   &trans   &trans   &trans   &trans
        // row 3
        &trans   &trans   &trans   &trans   &trans   &trans            &trans   &trans   &trans   &trans   &trans   &trans
        // thumb row
        &trans   &trans   &trans                                       &trans   &trans   &trans
      >;
    };

    

    LR_MEDIA {
      bindings = <
        // row 1
        &trans   &none   &none   &none   &none   &none            &none   &kp C_PP     &kp C_PREV     &kp C_NEXT      &none   &kp DEL
        // row 2
        &trans   &none   &none   &none   &none   &none            &none   &kp C_MUTE   &kp C_VOL_DN   &kp C_VOL_UP   &none   &none
        // row 3
        &trans   &none   &none   &none   &none   &none            &none   &none        &kp C_BRI_DN   &kp C_BRI_UP   &none   &kp PSCRN
        // thumb row
        &trans   &trans   &trans                                  &trans   &trans   &trans
      >;
    };

    LR_SERV {
      bindings = <
        // row 1
        &to LR_MAIN_EN   &none   &none   &none   &none   &bootloader            &bootloader   &none          &none          &none          &none   &to LR_MAIN_EN
        // row 2
        &none            &none   &none   &none   &none   &sys_reset             &sys_reset    &none          &none          &none          &none   &none
        // row 3
        &none            &none   &none   &none   &none   &SRVC_TEST             &SRVC_TEST    &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &none   &bt BT_CLR 
        // thumb row
        &trans   &trans   &trans                                                &trans   &trans   &trans
      >;
    };
  };
};