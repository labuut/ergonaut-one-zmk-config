#include <dt-bindings/zmk/mouse.h>
#include <behaviors/mouse_keys.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

#define LR_MAIN_EN    0
#define LR_MAIN_RU    1
#define LR_WILDS      2
#define LR_NUMS       3
#define LR_FN         4
#define LR_NAV        5
#define LR_MOUSE      6
#define LR_MOUSE_FAST 7
#define LR_MOUSE_SLOW 8
#define LR_MEDIA      9
#define LR_SERVICE    10

#define ZMK_MOUSE_DEFAULT_MOVE_VAL 800  // 600
#define ZMK_MOUSE_DEFAULT_SCRL_VAL 20   // 10

#define U_TAPPING_TERM 200
#define U_QUICK_TAP 0
#define U_STREAK_DECAY 125

#define U_TO_ENG_SCUT LA(LS(N8))
#define U_TO_RUS_SCUT LA(LS(N9))

#define KEY_CUT LC(X)
#define KEY_COPY LC(C)
#define KEY_PASTE LC(V)

#define LEFT_HAND_KEYS \
  0  1  2  3  4  5     \
  12 13 14 15 16 17    \
  24 25 26 27 28 29
#define LEFT_THUMB_KEYS \
  36 37 38 

#define RIGHT_HAND_KEYS \
  6  7  8  9 10 11      \
  18 19 20 21 22 23     \
  30 31 32 33 34 35
#define RIGHT_THUMB_KEYS \
  39 40 41


&lt { 
    flavor = "balanced";
    tapping-term-ms = <U_TAPPING_TERM>;
    quick-tap-ms = <U_QUICK_TAP>; 
};
&mt { 
    flavor = "balanced";
    tapping-term-ms = <U_TAPPING_TERM>;
    quick-tap-ms = <U_QUICK_TAP>; 
};
&mmv {
    acceleration-exponent = <1>;  // 1
    time-to-max-speed-ms = <300>; // 300
    delay-ms = <0>;
    trigger-period-ms = <8>;      // 16
};
&msc {
    acceleration-exponent = <1>;  // 0
    time-to-max-speed-ms = <40>;  // 300
    delay-ms = <0>;
    trigger-period-ms = <8>;      // 16
};

// / {
//   chosen {
//     zmk,matrix_transform = &default_transform;
//   };
// };

/ {
  // tap mods
  behaviors {
      // // NOTE: example, "LR_WILDS_WITH 0 TAB". 0 is dummy argument
      // // https://zmk.dev/docs/behaviors/hold-tap#using-different-behavior-types-with-hold-taps
      // LR_WILDS_WITH: LR_WILDS_WITH {
      //     compatible = "zmk,behavior-hold-tap";
      //     label = "LR_WILDS_WITH";
      //     #binding-cells = <2>;
      //     flavor = "hold-preferred";
      //     tapping-term-ms = <150>;
      //     // bindings = <hold>, <tap>;
      //     bindings = <&WILDS_RU>, <&kp>;
      // };

    // cmt - custom mod-tap
    cmt: cmt {
      compatible = "zmk,behavior-hold-tap";
      label = "custom-mod-tap";
      #binding-cells = <2>;
      flavor = "tap-preferred";
      tapping-term-ms = <200>;
      quick-tap-ms = <200>;
      // bindings = <hold>, <tap>;
      bindings = <&kp>, <&kp>;
    };
    // lsht: left_shift_tap {
    //   compatible = "zmk,behavior-hold-tap";
    //   flavor = "balanced";
    //   hold-trigger-key-positions = <RIGHT_HAND_KEYS RIGHT_THUMB_KEYS>;
    //   hold-trigger-on-release; // for combining HRMs
    //   tapping-term-ms = <U_TAPPING_TERM>;
    //   quick-tap-ms = <U_QUICK_TAP>;
    //   #binding-cells = <2>;
    //   bindings = <&kp>, <&kp>;
    // };
    lmt: left_mod_tap {
      compatible = "zmk,behavior-hold-tap";
      flavor = "balanced";
      hold-trigger-key-positions = <RIGHT_HAND_KEYS RIGHT_THUMB_KEYS>;
      hold-trigger-on-release; // for combining HRMs
      tapping-term-ms = <U_TAPPING_TERM>;
      quick-tap-ms = <U_QUICK_TAP>;
      require-prior-idle-ms = <U_STREAK_DECAY>;
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
    };
    // rsht: right_shift_tap {
    //   compatible = "zmk,behavior-hold-tap";
    //   flavor = "balanced";
    //   hold-trigger-key-positions = <LEFT_HAND_KEYS LEFT_THUMB_KEYS>;
    //   hold-trigger-on-release; // for combining HRMs
    //   tapping-term-ms = <U_TAPPING_TERM>;
    //   quick-tap-ms = <U_QUICK_TAP>;
    //   #binding-cells = <2>;
    //   bindings = <&kp>, <&kp>;
    // };
    rmt: right_mod_tap {
      compatible = "zmk,behavior-hold-tap";
      flavor = "balanced";
      hold-trigger-key-positions = <LEFT_HAND_KEYS LEFT_THUMB_KEYS>;
      hold-trigger-on-release; // for combining HRMs
      tapping-term-ms = <U_TAPPING_TERM>;
      quick-tap-ms = <U_QUICK_TAP>;
      require-prior-idle-ms = <U_STREAK_DECAY>;
      #binding-cells = <2>;
      bindings = <&kp>, <&kp>;
    };
    // Mouse 
    //  acceleration
    fmmv: fast_mouse_move {
      compatible = "zmk,behavior-input-two-axis";
      #binding-cells = <1>;
      x-input-code = <INPUT_REL_X>;
      y-input-code = <INPUT_REL_Y>;
      acceleration-exponent = <1>;  // 1
      time-to-max-speed-ms = <300>; // 300
      delay-ms = <0>;
      trigger-period-ms = <8>;      // 16
    };
    fmsc: fast_mouse_scroll {
      compatible = "zmk,behavior-input-two-axis";
      #binding-cells = <1>;
      x-input-code = <INPUT_REL_HWHEEL>;
      y-input-code = <INPUT_REL_WHEEL>;
      acceleration-exponent = <1>;  // 0
      time-to-max-speed-ms = <40>;  // 300
      delay-ms = <0>;
      trigger-period-ms = <8>;      // 16
    };
    //  deceleration
    smmv: slow_mouse_move {
      compatible = "zmk,behavior-input-two-axis";
      #binding-cells = <1>;
      x-input-code = <INPUT_REL_X>;
      y-input-code = <INPUT_REL_Y>;
      acceleration-exponent = <1>;  // 1
      time-to-max-speed-ms = <300>; // 300
      delay-ms = <0>;
      trigger-period-ms = <8>;      // 16
    };
  };

  // Mouse 
  //  acceleration
  fmmv_input_listener: fmmv_input_listener {
    compatible = "zmk,input-listener";
    device = <&fmmv>;
    scale-multiplier = <2>;
    scale-divisor = <1>;
  };
  fmsc_input_listener: fmsc_input_listener {
    compatible = "zmk,input-listener";
    device = <&fmsc>;
    scale-multiplier = <2>;
    scale-divisor = <1>;
  };
  //  deceleration
  smmv_input_listener: smmv_input_listener {
    compatible = "zmk,input-listener";
    device = <&smmv>;
    scale-multiplier = <1>;
    scale-divisor = <2>;
  };
};

/ {
  macros {
    // LAYOUT_EN: LAYOUT_EN {
    //   label = "ZM_LAYOUT_EN";
    //   compatible = "zmk,behavior-macro";
    //   #binding-cells = <0>;
    //   wait-ms = <10>;
    //   tap-ms = <30>;
    //   bindings =
    //     <&kp LA(LS(N8))>; // <&kp CAPS>;
    // };
    // LAYOUT_RU: LAYOUT_RU {
    //   label = "ZM_LAYOUT_RU";
    //   compatible = "zmk,behavior-macro";
    //   #binding-cells = <0>;
    //   wait-ms = <10>;
    //   tap-ms = <30>;
    //   bindings =
    //     <&kp LA(LS(N9))>; // <&kp LS(CAPS)>;
    // };
    TO_MAIN_EN: TO_MAIN_EN {
      label = "ZM_TO_MAIN_EN";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
        <&kp U_TO_ENG_SCUT>,
        <&to LR_MAIN_EN>;
    };
    TO_MAIN_RU: TO_MAIN_RU {
      label = "ZM_TO_MAIN_RU";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
        <&LAYOUT_RU>,
        <&to LR_MAIN_RU>;
    };
    WILDS_RU: WILDS_RU {
      label = "ZM_WILDS_RU";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
        <&kp U_TO_ENG_SCUT>,
        <&to LR_WILDS>,
        <&macro_pause_for_release>,
        <&to LR_MAIN_RU>,
        <&LAYOUT_RU>;
    };
    NUMBER_RU: NUMBER_RU {
      label = "ZM_NUMBER_RU";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
        <&LAYOUT_RU>,
        <&kp LS(N3)>,
        <&kp U_TO_ENG_SCUT>;
    };
    SRVC_TEST: SRVC_TEST {
      label = "ZM_SRVC_TEST";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
          <&kp S>,<&kp E>,<&kp R>,<&kp V>,<&kp I>,<&kp C>,<&kp E>;
    };
    BT_0: bt_profile_macro_0 {
      label = "BT_0";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings = 
          <&out OUT_BLE>,
          <&bt BT_SEL 0>;
    };
    BT_1: bt_profile_macro_1 {
      label = "BT_1";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings =
          <&out OUT_BLE>,
          <&bt BT_SEL 1>;
    };
    BT_2: bt_profile_macro_2 {
      label = "BT_2";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings =
          <&out OUT_BLE>,
          <&bt BT_SEL 2>;
    };
    BT_3: bt_profile_macro_3 {
      label = "BT_3";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      bindings =
          <&out OUT_BLE>,
          <&bt BT_SEL 3>;
    };
  };
};

/ {
  // key with mod items
  behaviors {
    EN_RU: EN_RU {
      compatible = "zmk,behavior-mod-morph";
      label = "EN_RU";
      #binding-cells = <0>;
      bindings = <&kp U_TO_RUS_SCUT>, <&TO_MAIN_RU>;
      mods = <(MOD_LCTL)>;
    };
    DOT_RU: DOT_RU {
      compatible = "zmk,behavior-mod-morph";
      label = "DOT_RU";
      #binding-cells = <0>;
      bindings = <&mt DOT FSLH>, <&kp DOT>;
      mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
    };
    COMMA_RU: COMMA_RU {
      compatible = "zmk,behavior-mod-morph";
      label = "COMMA_RU";
      #binding-cells = <0>;
      bindings = <&kp LS(FSLH)>, <&kp COMMA>;
      mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
    };
    FSLH_BSLH: FSLH_BSLH {
      compatible = "zmk,behavior-mod-morph";
      label = "FSLH_BSLH";
      #binding-cells = <0>;
      bindings = <&kp FSLH>, <&kp BSLH>;
      mods = <(MOD_LSFT)>;
    };
    L_PAR_BRC_BKT: L_PAR_BRC_BKT {
      compatible = "zmk,behavior-mod-morph";
      label = "L_PAR_BRC_BKT";
      #binding-cells = <0>;
      bindings = <&kp LPAR>, <&cmt LBKT LBRC>;
      mods = <(MOD_LSFT)>;
    };
    R_PAR_BRC_BKT: R_PAR_BRC_BKT {
      compatible = "zmk,behavior-mod-morph";
      label = "R_PAR_BRC_BKT";
      #binding-cells = <0>;
      bindings = <&kp RPAR>, <&cmt RBKT RBRC>;
      mods = <(MOD_LSFT)>;
    };
  };
};

/ {
  // combos (indexes start from 0)
  combos {
    compatible = "zmk,combos";
    // EN-RU layout: K + L
    switch_lang_new {
      timeout-ms = <20>;
      key-positions = <20 21>;
      layers = <LR_MAIN_EN LR_MAIN_RU>; 
      bindings = <&EN_RU>;
    };
    // LR_SERVICE. Left half: top left (Esc) + all LEFT_THUMB_KEYS
    to_serv_left {
      timeout-ms = <100>;
      key-positions = <0 LEFT_THUMB_KEYS>;
      layers = <LR_MAIN_EN LR_MAIN_RU>; 
      bindings = <&mo LR_SERVICE>;
    };
    // LR_SERVICE. Right half: top right + all RIGHT_THUMB_KEYS
    to_serv_right {
      timeout-ms = <100>;
      key-positions = <11 RIGHT_THUMB_KEYS>;
      layers = <LR_MAIN_EN LR_MAIN_RU>; 
      bindings = <&mo LR_SERVICE>;
    };
  };
};

/ {
  keymap {
    compatible = "zmk,keymap";
    LR_MAIN_EN {
      bindings = <
        // row 1
        &kp ESC   &kp Q         &kp W         &kp E          &kp R          &kp T            &kp Y   &kp U   &kp I   &kp O   &kp P       &none
        // row 2
        &kp TAB   &lmt LGUI A   &lmt LALT S   &lmt LSHFT D   &lmt LCTRL F   &kp G            &kp H   &rmt RCTRL J   &rmt RSHFT K   &rmt RALT L   &kp LGUI   &kp BSPC
        // row 3
        &none     &kp Z         &kp X         &kp C          &kp V          &kp B            &kp N   &kp M   &none   &none   &kp COMMA   &kp DOT
        // thumb row
        &kp ENTER   &mo LR_MOUSE   &lt LR_NUMS SPACE                                         &lt LR_NAV SPACE   &mo LR_WILDS   &lt LR_MEDIA ENTER
      >;
    };
    
    // LR_MAIN_RU {
    //   bindings = <
    //     // row 1
    //     &trans   &trans   &trans   &trans   &trans   &cmt GRAVE T            &kp Y    &trans        &trans      &trans    &trans           &kp LBKT
    //     // row 2
    //     &trans   &trans   &trans   &trans   &trans   &trans                  &trans   &cmt SQT J    &trans      &trans    &rmt LGUI SEMI   &trans
    //     // row 3
    //     &trans   &trans   &trans   &trans   &trans   &trans                  &trans   &cmt RBKT M   &kp COMMA   &kp DOT   &COMMA_RU        &DOT_RU
    //     // thumb row
    //     &trans   &trans   &trans                                             &trans   &WILDS_RU   &trans
    //   >;
    // };

    // LR_WILDS {
    //   bindings = <
    //     // row 1
    //     &kp GRAVE   &NUMBER_RU   &kp HASH       &kp PIPE          &kp AMPS           &kp CARET            &kp PRCNT   &FSLH_BSLH         &kp ASTRK         &kp SQT           &kp DQT         &none
    //     // row 2
    //     &trans      &kp LGUI     &lmt LALT AT   &lmt LSHFT EXCL   &lmt LCTRL QMARK   &none                &kp EQUAL   &rmt RCTRL MINUS   &rmt RSHFT PLUS   &rmt RALT COLON   &kp LGUI SEMI   &trans
    //     // &kp TAB   &lmt LGUI A   &lmt LALT S   &lmt LSHFT D   &lmt LCTRL F   &kp G                      &kp H   &rmt RCTRL J                &rmt RSHFT K          &rmt RALT L       &kp LGUI   &kp BSPC
    //     // &trans      &none        &kp AT     &kp EXCL   &kp QMARK   &none                               &kp EQUAL   &kp MINUS        &kp PLUS         &kp COLON   &kp SEMI   &trans
    //     // row 3
    //     &trans      &none        &kp DLLR       &none             &none              &none                &none       &L_PAR_BRC_BKT     &R_PAR_BRC_BKT    &kp LT            &kp GT          &trans
    //     // thumb row
    //     &trans   &trans   &trans                                                                          &trans   &trans   &trans
    //   >;
    // };
    
    // LR_NUMS {
    //   bindings = <
    //     // row 1
    //     &trans   &none       &none      &none       &none       &none            &none   &kp N7   &kp N8   &kp N9   &none    &none
    //     // row 2
    //     &trans   &kp LGUI    &kp LALT   &kp LSHFT   &kp LCTRL   &none            &none   &kp N4   &kp N5   &kp N6   &kp N0   &trans
    //     // row 3
    //     &trans   &mo LR_FN   &none      &none       &none       &none            &none   &kp N1   &kp N2   &kp N3   &trans   &trans
    //     // thumb row
    //     &trans   &trans   &trans                                                 &trans   &trans   &trans
    //   >;
    // };

    // LR_FN {
    //   bindings = <
    //     // row 1
    //     &trans   &none       &none      &none       &none       &none            &none   &kp F7   &kp F8   &kp F9   &kp F10   &none
    //     // row 2
    //     &trans   &kp LGUI    &kp LALT   &kp LSHFT   &kp LCTRL   &none            &none   &kp F4   &kp F5   &kp F6   &kp F11   &trans
    //     // row 3
    //     &trans   &none       &none      &none       &none       &none            &none   &kp F1   &kp F2   &kp F3   &kp F12   &none
    //     // thumb row
    //     &trans   &trans   &trans                                                 &trans   &trans   &trans
    //   >;
    // };
    
    // LR_NAV {
    //   bindings = <
    //     // row 1
    //     &trans   &none       &none         &none          &none           &none            &kp PG_UP   &kp HOME     &kp UP       &kp END     &none       &none
    //     // row 2
    //     &trans   &kp LGUI    &kp LALT      &kp LSHFT      &kp LCTRL       &none            &kp PG_DN   &kp LEFT     &kp DOWN     &kp RIGHT   &none       &trans
    //     // row 3
    //     &trans   &none       &kp KEY_CUT   &kp KEY_COPY   &kp KEY_PASTE   &none            &none       &kp C_PREV   &kp C_NEXT   &none       &kp K_APP   &trans
    //     // thumb row
    //     &trans   &trans   &trans                                                           &trans   &trans   &trans
    //   >;
    // };

    // LR_MOUSE {
    //   bindings = <
    //     // row 1
    //     &trans   &trans              &none         &none          &none           &none            &msc SCRL_UP     &msc SCRL_LEFT   &mmv MOVE_UP     &msc SCRL_RIGHT   &none    &none
    //     // row 2
    //     &trans   &mo LR_MOUSE_FAST   &kp LALT      &kp LSHFT      &kp LCTRL       &none            &msc SCRL_DOWN   &mmv MOVE_LEFT   &mmv MOVE_DOWN   &mmv MOVE_RIGHT   &none    &trans
    //     // row 3
    //     &trans   &mo LR_MOUSE_SLOW   &kp KEY_CUT   &kp KEY_COPY   &kp KEY_PASTE   &none            &none            &mkp MB4         &mkp MB5         &none             &trans   &trans
    //     // thumb row
    //     &trans   &trans   &trans                                                                   &mkp RCLK   &mkp LCLK   &mkp MCLK
    //   >;
    // };

    // LR_MOUSE_FAST {
    //   bindings = <
    //     // row 1
    //     &trans   &trans   &trans   &trans   &trans   &trans            &fmsc SCRL_UP     &fmsc SCRL_LEFT   &fmmv MOVE_UP     &fmsc SCRL_RIGHT   &trans   &trans
    //     // row 2
    //     &trans   &trans   &trans   &trans   &trans   &trans            &fmsc SCRL_DOWN   &fmmv MOVE_LEFT   &fmmv MOVE_DOWN   &fmmv MOVE_RIGHT   &trans   &trans
    //     // row 3  
    //     &trans   &trans   &trans   &trans   &trans   &trans            &trans            &trans            &trans            &trans             &trans   &trans
    //     // thumb row
    //     &trans   &trans   &trans                                       &trans   &trans   &trans
    //   >;
    // };

    // LR_MOUSE_SLOW {
    //   bindings = <
    //     // row 1
    //     &trans   &trans   &trans   &trans   &trans   &trans            &trans   &trans            &smmv MOVE_UP     &trans             &trans   &trans
    //     // row 2
    //     &trans   &trans   &trans   &trans   &trans   &trans            &trans   &smmv MOVE_LEFT   &smmv MOVE_DOWN   &smmv MOVE_RIGHT   &trans   &trans
    //     // row 3
    //     &trans   &trans   &trans   &trans   &trans   &trans            &trans   &trans            &trans            &trans             &trans   &trans
    //     // thumb row
    //     &trans   &trans   &trans                                       &trans   &trans   &trans
    //   >;
    // };

    // LR_MEDIA {
    //   bindings = <
    //     // row 1
    //     &trans   &none   &none   &none   &none   &none            &none   &kp C_PP     &kp C_PREV     &kp C_NEXT     &none   &kp DEL
    //     // row 2
    //     &trans   &none   &none   &none   &none   &none            &none   &kp C_MUTE   &kp C_VOL_DN   &kp C_VOL_UP   &none   &none
    //     // row 3
    //     &trans   &none   &none   &none   &none   &none            &none   &none        &kp C_BRI_DN   &kp C_BRI_UP   &none   &kp PSCRN
    //     // thumb row
    //     &trans   &trans   &trans                                  &trans   &trans   &trans
    //   >;
    // };

    // LR_SERVICE {
    //   bindings = <
    //     // row 1
    //     &to LR_MAIN_EN   &none   &none   &none   &none   &bootloader            &bootloader   &none   &none   &none   &none          &to LR_MAIN_EN
    //     // row 2
    //     &none            &none   &none   &none   &none   &sys_reset             &sys_reset    &none   &none   &none   &none          &none
    //     // row 3
    //     &none            &none   &none   &none   &none   &SRVC_TEST             &SRVC_TEST    &BT_0   &BT_1   &BT_2   &out OUT_USB   &bt BT_CLR 
    //     // thumb row
    //     &trans   &trans   &trans                                                &trans   &trans   &trans
    //   >;
    // };
  };
};



