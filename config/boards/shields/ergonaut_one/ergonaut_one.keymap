/*
* Copyright (c) 2021 Rafael Yumagulov
*
* SPDX-License-Identifier: MIT
*/

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>

#define LR_MAIN_EN  0
#define LR_MAIN_RU  1
#define LR_NUMS     2
#define LR_WILDS    3
#define LR_NAV      4
#define LR_SPEC     5
#define LR_SERV     6

&lt { quick_tap_ms = <100>; };
&mt { quick-tap-ms = <400>; };
&sl { release-after-ms = <1000>; };

/ {
  chosen {
    zmk,matrix_transform = &default_transform;
  };
};

/ {
  macros {
    LAYOUT_EN: LAYOUT_EN {
      label = "ZM_LAYOUT_EN";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
        <&kp LA(LS(N8))>; // <&kp CAPS>;
    };
    LAYOUT_RU: LAYOUT_RU {
      label = "ZM_LAYOUT_RU";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
        <&kp LA(LS(N9))>; // <&kp LS(CAPS)>;
    };
    TO_MAIN_EN: TO_MAIN_EN {
      label = "ZM_TO_MAIN_EN";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
        <&LAYOUT_EN>,
        <&to LR_MAIN_EN>;
    };
    TO_MAIN_RU: TO_MAIN_RU {
      label = "ZM_TO_MAIN_RU";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
        <&LAYOUT_RU>,
        <&to LR_MAIN_RU>;
    };
    WILDS_RU: WILDS_RU {
      label = "ZM_WILDS_RU";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
        <&LAYOUT_EN>,
        <&to LR_WILDS>,
        <&macro_pause_for_release>,
        <&to LR_MAIN_RU>,
        <&LAYOUT_RU>;
    };
    NUMBER_RU: NUMBER_RU {
      label = "ZM_NUMBER_RU";
      compatible = "zmk,behavior-macro";
      #binding-cells = <0>;
      wait-ms = <10>;
      tap-ms = <30>;
      bindings =
        <&LAYOUT_RU>,
        <&kp LS(N3)>,
        <&LAYOUT_EN>;
    };
  };
};

/ {
  behaviors {
    EN_RU: EN_RU {
      compatible = "zmk,behavior-mod-morph";
      label = "EN_RU";
      #binding-cells = <0>;
      bindings = <&TO_MAIN_EN>, <&TO_MAIN_RU>;
      mods = <(MOD_LCTL)>;
    };
    DOT_RU: DOT_RU {
      compatible = "zmk,behavior-mod-morph";
      label = "DOT_RU";
      #binding-cells = <0>;
      bindings = <&mt DOT FSLH>, <&kp DOT>;
      mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
    };
    COMMA_RU: COMMA_RU {
      compatible = "zmk,behavior-mod-morph";
      label = "COMMA_RU";
      #binding-cells = <0>;
      bindings = <&kp LS(FSLH)>, <&kp COMMA>;
      mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
      keep-mods = <(MOD_LCTL|MOD_LALT|MOD_LGUI)>;
    };
    FSLH_BSLH: FSLH_BSLH {
      compatible = "zmk,behavior-mod-morph";
      label = "FSLH_BSLH";
      #binding-cells = <0>;
      bindings = <&kp FSLH>, <&kp BSLH>;
      mods = <(MOD_LSFT)>;
    };
    // PARS: PARS {
    //   compatible = "zmk,behavior-mod-morph";
    //   label = "PARS";
    //   #binding-cells = <0>;
    //   bindings = <&kp LPAR>, <&kp RPAR>;
    //   mods = <(MOD_LSFT)>;
    // };
    BRCS: BRCS {
      compatible = "zmk,behavior-mod-morph";
      label = "BRCS";
      #binding-cells = <0>;
      bindings = <&kp LBRC>, <&kp RBRC>;
      mods = <(MOD_LSFT)>;
    };
    BKTS: BKTS {
      compatible = "zmk,behavior-mod-morph";
      label = "BKTS";
      #binding-cells = <0>;
      bindings = <&kp LBKT>, <&kp RBKT>;
      mods = <(MOD_LSFT)>;
    };
    LT_GT: LT_GT {
      compatible = "zmk,behavior-mod-morph";
      label = "LT_GT";
      #binding-cells = <0>;
      bindings = <&kp LT>, <&kp GT>;
      mods = <(MOD_LSFT)>;
    };
    // LPAR_LT: LPAR_LT {
    //   compatible = "zmk,behavior-mod-morph";
    //   label = "LPAR_LT";
    //   #binding-cells = <0>;
    //   bindings = <&kp LPAR>, <&kp LT>;
    //   mods = <(MOD_LSFT)>;
    // };
    // RPAR_GT: RPAR_GT {
    //   compatible = "zmk,behavior-mod-morph";
    //   label = "RPAR_GT";
    //   #binding-cells = <0>;
    //   bindings = <&kp RPAR>, <&kp GT>;
    //   mods = <(MOD_LSFT)>;
    // };
    // LBRC_LBKT: LBRC_LBKT {
    //   compatible = "zmk,behavior-mod-morph";
    //   label = "LBRC_LBKT";
    //   #binding-cells = <0>;
    //   bindings = <&kp LBRC>, <&kp LBKT>;
    //   mods = <(MOD_LSFT)>;
    // };
    // RBRC_RBKT: RBRC_RBKT {
    //   compatible = "zmk,behavior-mod-morph";
    //   label = "RBRC_RBKT";
    //   #binding-cells = <0>;
    //   bindings = <&kp RBRC>, <&kp RBKT>;
    //   mods = <(MOD_LSFT)>;
    // };
  };
};

/ {
  combos {
    // indexes start from 0
    compatible = "zmk,combos";
    // EN-RU layout: [ + BSPC
    switch_lang {
      timeout-ms = <50>;
      key-positions = <11 23>;
      layers = <LR_MAIN_EN LR_MAIN_RU LR_NUMS LR_WILDS LR_NAV>; 
      bindings = <&EN_RU>;
    };
    // LR_SERVICE: two very left thumb keys of LEFT part
    to_serv_left {
      timeout-ms = <50>;
      key-positions = <36 37>;
      layers = <LR_MAIN_EN LR_MAIN_RU>; 
      bindings = <&mo LR_SERV>;
    };
    // LR_SERVICE: two very right thumb keys of RIGHT part
    to_serv_right {
      timeout-ms = <50>;
      key-positions = <40 41>;
      layers = <LR_MAIN_EN LR_MAIN_RU>; 
      bindings = <&mo LR_SERV>;
    };
  };
};

/ {
  behaviors {
      // // NOTE: example, "LR_WILDS_WITH 0 TAB". 0 is dummy argument
      // // https://zmk.dev/docs/behaviors/hold-tap#using-different-behavior-types-with-hold-taps
      // LR_WILDS_WITH: LR_WILDS_WITH {
      //     compatible = "zmk,behavior-hold-tap";
      //     label = "LR_WILDS_WITH";
      //     #binding-cells = <2>;
      //     flavor = "hold-preferred";
      //     tapping-term-ms = <150>;
      //     // bindings = <hold>, <tap>;
      //     bindings = <&WILDS_RU>, <&kp>;
      // };

      // cmt - custom mod-tap
      cmt: cmt {
        compatible = "zmk,behavior-hold-tap";
        label = "custom-mod-tap";
        #binding-cells = <2>;
        flavor = "tap-preferred";
        tapping-term-ms = <200>;
        quick-tap-ms = <200>;
        // bindings = <hold>, <tap>;
        bindings = <&kp>, <&kp>;
    };
  };
};

/ {
  keymap {
    compatible = "zmk,keymap";
    LR_MAIN_EN {
      bindings = <
        // row 1
        &kp ESC        &kp Q   &kp W   &kp E   &kp R   &kp T            &kp Y   &kp U   &kp I   &kp O   &kp P       &none
        // row 2
        &mt LWIN TAB   &kp A   &kp S   &kp D   &kp F   &kp G            &kp H   &kp J   &kp K   &kp L   &none       &kp BSPC
        // row 3
        &kp LCTRL      &kp Z   &kp X   &kp C   &kp V   &kp B            &kp N   &kp M   &none   &none   &kp COMMA   &kp DOT
        // thumb row
        &mt LALT ENTER   &kp LSHFT   &lt LR_NUMS SPACE                  &lt LR_NAV SPACE   &mo LR_WILDS   &lt LR_SPEC ENTER
      >;
    };
    
    LR_MAIN_RU {
      bindings = <
        // row 1
        &trans   &kp Q   &kp W   &kp E   &kp R   &cmt GRAVE T            &kp Y   &kp U         &kp I       &kp O     &kp P       &cmt SQT LBKT
        // row 2
        &trans   &kp A   &kp S   &kp D   &kp F   &kp G                   &kp H   &kp J         &kp K       &kp L     &kp SEMI    &trans
        // row 3
        &trans   &kp Z   &kp X   &kp C   &kp V   &kp B                   &kp N   &cmt RBKT M   &kp COMMA   &kp DOT   &COMMA_RU   &DOT_RU
        // thumb row
        &trans   &trans   &trans                                         &trans   &WILDS_RU   &trans
      >;
    };
    
    LR_NUMS {
      bindings = <
        // row 1
        &trans   &none   &kp F7   &kp F8   &kp F9   &kp F10            &none   &kp N7   &kp N8   &kp N9   &none    &none
        // row 2
        &trans   &none   &kp F4   &kp F5   &kp F6   &kp F11            &none   &kp N4   &kp N5   &kp N6   &kp N0   &trans
        // row 3
        &trans   &none   &kp F1   &kp F2   &kp F3   &kp F12            &none   &kp N1   &kp N2   &kp N3   &trans   &trans
        // thumb row
        &trans   &trans   &trans                                       &trans   &trans   &trans
      >;
    };
    
    LR_WILDS {
      bindings = <
        // row 1
        &kp GRAVE   &NUMBER_RU   &kp HASH   &kp PIPE   &kp AMPS    &kp CARET            &kp PRCNT   &FSLH_BSLH   &kp ASTRK   &kp SQT     &kp DQT    &none
        // row 2
        &trans      &none        &kp AT     &kp EXCL   &kp QMARK   &none                &kp EQUAL   &kp MINUS    &kp PLUS    &kp COLON   &kp SEMI   &trans
        // row 3
        &trans      &none        &kp DLLR   &none      &none       &none                &BKTS       &kp LPAR     &kp RPAR    &BRCS       &LT_GT     &kp GT
        // thumb row
        &trans   &trans   &trans                                                        &trans   &trans   &trans
      >;
    };
    
    LR_NAV {
      bindings = <
        // row 1
        &trans   &trans   &trans    &trans    &trans   &trans            &kp PG_UP   &kp HOME   &kp UP     &kp END     &kp C_NEXT   &kp K_APP
        // row 2
        &trans   &trans   &trans    &trans    &trans   &trans            &kp PG_DN   &kp LEFT   &kp DOWN   &kp RIGHT   &kp C_PREV   &trans
        // row 3
        &trans   &trans   &trans    &trans    &trans   &trans            &none       &none      &none      &trans      &trans       &trans
        // thumb row
        &trans   &trans   &trans                                         &trans   &trans   &trans
      >;
    };
    
    LR_SPECIAL {
      bindings = <
        // row 1
        &trans   &none   &none   &none   &none   &none            &none   &kp C_PP     &kp C_PREV     &kp C_NEXT     &none   &kp DEL
        // row 2
        &trans   &none   &none   &none   &none   &none            &none   &kp C_MUTE   &kp C_VOL_DN   &kp C_VOL_UP   &none   &none
        // row 3
        &trans   &none   &none   &none   &none   &none            &none   &none        &kp C_BRI_DN   &kp C_BRI_UP   &none   &kp PSCRN
        // thumb row
        &trans   &trans   &trans                                  &trans   &trans   &trans
      >;
    };

    LR_SERVICE {
      bindings = <
        // row 1
        &none   &none   &none   &none   &none   &bootloader            &bootloader   &none          &none          &none          &none   &bt BT_CLR
        // row 2
        &none   &none   &none   &none   &none   &sys_reset             &sys_reset    &bt BT_SEL 3   &bt BT_SEL 4   &bt BT_SEL 5   &none   &none
        // row 3
        &none   &none   &none   &none   &none   &none                  &none         &bt BT_SEL 0   &bt BT_SEL 1   &bt BT_SEL 2   &none   &none 
        // thumb row
        &trans   &trans   &trans                                       &trans   &trans   &trans
      >;
    };
  };
};